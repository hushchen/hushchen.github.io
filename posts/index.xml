<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on HERO</title>
    <link>https://hushchen.github.io/posts/</link>
    <description>Recent content in Posts on HERO</description>
    <generator>Hugo</generator>
    <language>zh-tw</language>
    <copyright>© Athul</copyright>
    <lastBuildDate>Sun, 30 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://hushchen.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vibe Coding 初體驗</title>
      <link>https://hushchen.github.io/posts/hushvibe_coding_experence_1/</link>
      <pubDate>Sun, 30 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://hushchen.github.io/posts/hushvibe_coding_experence_1/</guid>
      <description>Vibe Coding 初體驗 這篇文章是我第一次使用Github Copilot進行程式碼的撰寫過程,紀錄當時的心情與想法.&#xA;Abratraction 隨著2022年ChatGPT上市,GenAI成為了近代科技的新一波創新革命,為人們帶來了許多便利的革新, 而在軟體程式碼的撰寫上,也從傳統的工程師手動編碼,並需要透過文件查詢等方式來促進開發的效能, 如今可以透過GenAI的輔助設計,帶來更高效率的軟體開發體驗,無論是撰寫程式碼還是模組測試,都可以利用 GenAI的輔助來提升開發的效率,我想這就是新一世代科技的變革,我相信這將逐漸成為未來的趨勢, 並且進一步改變軟體開發過程中程式設計的方式,所以我嘗試使用Github Copilot來協助我撰寫程式碼, 這篇文章將紀錄我在使用Github Copilot的過程中,Vibe Coding所帶來的體驗與一些問題的解決方法.&#xA;GenAI在各大AI領域公司的產品中有許多不同應用面向發展,Vibe Coding這一個領域的應用也有不少公司正在發展, 例如Github Copilot、Tabnine、Codeium、Cursor等,這些產品都是用來協助開發者撰寫程式碼的方案, 我選擇的平台式Github Copilot,因為它與VS Code有良好的整合,對我來說較為熟悉,且使用者生態圈也較為成熟, 純屬個人偏好,其他產品也各有優勢,大家可以依照自己的需求來選則產品.&#xA;Method 首先,先紹一下目前撰寫該篇文章的時間點,Github Copilot的價格,如官方連結:&#xA;Github Copilot Price&#xA;以個人用戶來說,每月$10USD,或是每年$100USD,如果是學生的話,可以免費使用Github Copilot, 而企業用戶的話,則是每月$19USD,或是每年$199USD,是否值得購買我個人看法是直接體驗看看就知道是否值得投資.&#xA;所以我利用一個Side Project來體驗使用Github Copilot進行Vibe Coding, 我規劃了一個Python的Side Project用來進行一些翻譯的工作,幫助我來看一些影片及文件等, 也順便在這個專案中,學習一下如何使用OpenAI的API來完成相關的任務.&#xA;首先我開啟了VS Code,並且登入Github Copilot的帳號,因為Github Copilot目前已經整合了許多功能, 這裡不介紹這些功能,只會記錄在這過程中,我如何與Github Copilot互動,並完成程式碼的開發工作, 登入帳號後,開啟Github Copilot Chat視窗,如下圖:&#xA;並直接開始在Chat視窗中與Copilot進行對話,首先我們不應該一開始就找Copilot對話,如同一般設計流程一樣, 不是剛開始就埋頭苦幹編寫程式碼,而是先進行需求分析,先規劃好架構,例如模組規劃,輸出入介面等等, 所以一開始我先在ReadMe中寫下需求與模組規劃,再開始與Copilot進行對話, 並且讓Copilot在專案資料夾中去獲取ReadMe中的內容,所以開始對話時,Copilot也會知道使用者的需求, 在對話的過程中,都是用自然語言進行對話,讓Copilot產生程式碼,這過程真的很順,Copilot產生程式碼的速度也很快, 但我想這裡有一個重點要說明,其實Vibe Coding的過程中,個人體驗是當Copilot幫我產生程式碼後,使用者還是必須理解程式碼的內容, 這樣才能知道產生的結果是否符合自己預期的結果,我覺得這個過程是輔助,而不是取代, 所以使用者還是必須要有一定的程式設計能力,才能夠使用Github Copilot來進行Vibe Coding.&#xA;很順利的產生了所需要的程式碼,接下來就開始進行測試,測試的過程中發現,其實產生的程式碼非完全可以直接使用, 還是得需要經過一些Debug的過程,甚至Copilot所使用的API也是舊版的樣式,目前我還不知道如何使用對話方式來改善此問題, 我試著向Copilot說明已經使用到舊的API,但是它無法完成修正的任務,所以在修正的過程中,我還是有自己查API文件, 以及使用其他AI工具,例如ChatGPT來進行諮詢API相關的問題,這個案例也充分表現出,AI工具還是可以互補的, 使用上應該好好利用多種工具來協助自己完成工作任務.&#xA;Conclusion 最後,很快速也很順利的完成自己所規劃的Side Project,或許程式的運作模式不是相當完善,但已經足以完成 自用功能的軟體需求,這也表示Vibe Coding將可以輔助使用者完成一些個人需求的設計, 也可以協助使用者快速建立軟體樣板模型,在產品開發過程中先完成MVP的設計,未來再透過迭代讓更深入的問題由 工程師來改善,我相信這將會是未來新一波的軟體開發模式.</description>
    </item>
    <item>
      <title>Project of Poetry workflow</title>
      <link>https://hushchen.github.io/posts/hushpyenv_poetry_workflow_2/</link>
      <pubDate>Sat, 22 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://hushchen.github.io/posts/hushpyenv_poetry_workflow_2/</guid>
      <description>Project Development with Poetry workflow 在Python開發專案的過程中,如何操作Poetry來建立虛擬環境及執行程式&#xA;Abratraction 在Python專案開發過程中,使用Poetry來進行套件安裝,虛擬環境建置,以及執行程式,過程中進行套件安裝及管理相當方便, 在開發過程中,遇到的一些環節,在本篇文章中紀錄,利於未來開發時參考.&#xA;Method (1) 建立專案,使用指令Poetry new project_name建立專案.&#xA;(2) 搭配pyenv local指令,建立Project Local Python版本的控制.&#xA;(3) 使用Poetry add在pyproject.toml中新增在專案中需要使用的套件.&#xA;(4) 使用Poetry install指令安裝pyproject.toml中列出的所有套件.&#xA;(5) 使用Poetry show指令查看已安裝的套件,--tree參數可以查看套件的相依性.&#xA;(6) 使用Poetry env info指令查看虛擬環境的相關資訊.&#xA;(7) 舊版本使用Poetry shell指令進入虛擬環境,不過在2.0.1版本後已經不再推薦使用此指令,改使用Poetry env activate來進入虛擬環境, 不過,這裡有一個需要留意的問題,使用powershell遇到沒有啟動的狀況,須改用指令Invoke-Expression (poetry env activate)來啟動虛擬環境.&#xA;(8) 啟動虛擬環境後,使用python --version查看Python版本,此時會發現為pyenv設定的版本.&#xA;(9) 使用python main.py可以直接執行該專案下的main.py程式碼內容.&#xA;Conclusion 上述指令紀錄開發過程中Poetry常用的指令.&#xA;Reference Python 套件管理器——Poetry 完全入門指南 Poetry 2.0.1 改用 poetry env activate </description>
    </item>
    <item>
      <title>Visual Studio Code Speech</title>
      <link>https://hushchen.github.io/posts/hushvscode_speech/</link>
      <pubDate>Sat, 22 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://hushchen.github.io/posts/hushvscode_speech/</guid>
      <description>Visual Studio Code Speech Visual Studio Code擴充套件Speech&#xA;Abratraction Visual Studio Code Speech是一個擴充套件,可以將程式碼轉換成語音,並且支援多國語言,也可以將語音轉換成文字, 我們可以利用這個套件來進行語音轉文字的紀錄,經過測試後發現其辨識度還算不錯,可以用來做簡單的筆記, 未來可以搭配LLM(語言模型)來進行更進一步的應用,例如筆記文件整理,程式碼撰寫等.&#xA;Method 在Visual Studio Code中安裝Speech擴充套件 VS Code Speech 套件,並且安裝其他種語言包, 例如: Chinese (Simplified), Chinese (Traditional), English, Japanese, Korean等等.&#xA;安裝好套件及語言包後,開啟一個空白的文件,按下 Ctrl+Shift+V 開啟語音輸入功能.&#xA;另外,我們也可以使用 Ctrl+I 來啟動Github Copilot Inline Chat功能, 如開啟此模式時,再次按下 Ctrl+I 可以開啟語音輸入模式對Github Copilot用說的方式下指令.&#xA;Conclusion Visual Studio Code Speech是一個很有趣的擴充套件,可以用來進行語音轉文字的操作,且在測試過程中試著將 網路關閉,語音轉文字功能仍然可以正常工作,這表示語音轉文字的功能是在本地端進行的,這樣就不用擔心隱私問題.&#xA;Reference Visual Studio Code </description>
    </item>
    <item>
      <title>pyenv Poetry workflow</title>
      <link>https://hushchen.github.io/posts/hushpyenv_poetry_workflow_1/</link>
      <pubDate>Sat, 01 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://hushchen.github.io/posts/hushpyenv_poetry_workflow_1/</guid>
      <description>pyenv Poetry workflow 首次建構pyenv控制Porject Local Python版本及使用Poetry控制Package安裝,紀錄使用Workflow&#xA;Abratraction 上一篇pyenv introduction分享使用pyenv控制Python版本, 雖然可以透過pyenv控制Project Local Python版本,除此之外也希望能夠有效區隔各Project的虛擬環境及Package安裝控制, 接下來就開始學習如何使用Poetry來協助建立虛擬環境及安裝Project所需要的各式Package.&#xA;最後順利可以進行Project資料夾的pyenv localPython版本設定,並且透過Poetry建立專案虛擬機器環境及Package管理.&#xA;Method 為了避免在開發Python專案時常遇到版本不同所造成的困擾,所以開始學習使用pinenv, Poetry兩套工具, 以下整理的是自己初次使用的過程,不確定是否正確,但目前為自己可以控制良好運作的一套流程.&#xA;OS: Windows 11, x64 System.&#xA;(1) PowerShell 安裝 pyenv : 確認command prompt可以執行pyenv及環境變數內容正確後,在pyenv下載所需要的Python版本,為了實驗所以下載了兩個不同版本3.12.8及3.11.9&#xA;(2) Scoop安裝pipx,並在pipx下安裝Poetry,並利用pipx建立環境變數後,確認command prompt可以執行Poetry, 這時Poetry出現訊息指出系統中並無安裝Python,在此以前,曾經在系統中自行安裝過Python,後來因為嘗試使用pyenv所以移除原系統中自行安裝的Python, 依據訊息內容,所以在系統中將Python安裝了回去.系統的Python為3.12.8&#xA;(3) 上述兩個安裝工作完成後,系統架構為 Windows 11 + Python 3.12.8, pyenv versions: 3.11.9 , 3.12.8&#xA;當我執行Poetry new DEMO時, DEMO資料夾下的 pyproject.toml 內容會將被設定為 requires-python = &amp;quot;&amp;gt;=3.12&amp;quot;, 接下來我希望讓該Project專案為Python 3.11.9版本, 我使用pyenv local 3.11.9將專案設定為 3.11.9, 此時安裝套件時候提示版本不符, 故修改pyproject.toml內容為requires-python = &amp;quot;&amp;gt;=3.11&amp;quot;,可順利建立虛擬環境及安裝套件.&#xA;Conclusion 經過上述步驟後,可以完成pyenv工具建立Project Local Python版本的控制,例外搭配Poetry建立虛擬環境及Package管理安裝, 所以在Poetry安裝好後,已經將poetry config --list所列出的參數virtualenvs.</description>
    </item>
    <item>
      <title>2025 農曆春節賀卡</title>
      <link>https://hushchen.github.io/posts/2025cny_card_prompt/</link>
      <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://hushchen.github.io/posts/2025cny_card_prompt/</guid>
      <description>Prompt 1 I would like to generate a image for Chinese New Year of 2025 which is a snake year. Pleae use the snake element in the picture. The snake is similar to Disney style and cute. Don&amp;rsquo;t open its mouth as well as Don&amp;rsquo;t show the teeth. There are some chinese traditional lamps in the top side of the picture. 單純的燈籠,不包含任何圖樣. There are two kids with in the center and some 金元寶 on the bottom side.</description>
    </item>
    <item>
      <title>pyenv introduction</title>
      <link>https://hushchen.github.io/posts/hushpyenv_learning_1/</link>
      <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://hushchen.github.io/posts/hushpyenv_learning_1/</guid>
      <description>Abratraction 最近開始學習Python,過去也偶爾會使用到開源專案,部分開源專案會使用Python來開發, 一直以來想要學習Python,卻沒有下定決心偶碰一下,直到近來AI興起,我個人覺得正式學習程式語言的一大契機, 下次再分享為何是一大契機,通常在使用Python最常遇到的問題就是版本多,部分套件會有不相容情況,因此這一次 將學習如何使用pyenv來隔離Python與切換版本的技巧,完成後可以透過pyenv global來設定全域的 Python版本,pyenv local來設定資料夾本地的Python,在電腦中安裝多版本的Python也能夠做好有效的切換控制.&#xA;Methond 首先,在原本Windows的環境中安裝Python,就會依同安裝Python Launcher啟動器,透過啟動器也可以做好切換, 例如使用py -2 -m pip install requests # 執行 Python 2,py -3 -m pip install requests # 執行 Python 3, 指令py是Windows中的Python Launcher,透過Launcher來啟動特定版本的Python, 而執行python則是直接執行 Python 解譯器,沒有切換版本的功能,Python Launcher的缺點是Windows才有, 非跨平台工具,且無法安裝多種次版本在同一台主機上,例如3.11.5及3.11.3.&#xA;另外一個選擇就是pyenv工具,其本身為一種Linux系統上的工具,沒有Windows版本,後來有貢獻者將其修改為 Windows版本Project pyenv-win,下列也簡述為pyenv, 安裝方法參考官方安裝文件利用PowerShell Script安裝.&#xA;安裝完成後,會在系統環境變數中看到出現了出現了兩個新的Path. 安裝完成後,在Command Prompt或是powershellconsole中執行pyenv versions指令,會發現目前並無安裝的Python版本, 依照個人經驗,pyenv可能未包含比較新版本的安裝清單,因此我們先執行pyenv update來更新清單, 更新完畢後即可以執行pyenv install -l查看目前可以安裝的Python版本清單,pyenv install 3.12.8即會開始安裝3.12.8版本,&#xA;安裝完成後,可以分別設定global及local的Python版本,global屬於全域的設定, 如果在開發資料夾中,希望設定該資料夾的Python版本,可以使用pyenv local &amp;lt;python_version&amp;gt;來設定該資料夾所使用的Python, 並且會在該資料夾中創造出一個.python-version的檔案,檔案內即紀錄local python版本.&#xA;Conclution 經過上述步驟後,即可以安裝pyenv工具,並開始進行Python版本的控制, 不過在實務開發上,需搭配Poetry來使用會更加清楚控制Python版本及Package,未來再另外分享.&#xA;Reference 管理多版本的 Python 環境&amp;ndash;pyenv 建立一個方便開發的 Python 環境 （零）- 使用 Pyenv 管理 Python 版本 為自己學Python - 高見龍 </description>
    </item>
    <item>
      <title>2024暑期旅遊 - 日本九州 Kyusu</title>
      <link>https://hushchen.github.io/posts/herotraveloguekyusu/</link>
      <pubDate>Sun, 21 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://hushchen.github.io/posts/herotraveloguekyusu/</guid>
      <description>2024暑期旅遊紀錄,這次的旅遊是與老婆姐姐一家人一同出遊,共有五個大人五個小孩,寫下旅遊過程中的紀錄與分享.&#xA;機場與租車 福岡機場距離福岡市區相當近,只需要搭地點兩站即可抵達博多車站,交通相當便利,只是目前福岡機場也有整修工程, 因此要搭地鐵需要做一段接駁車,我們抵達時是由租車公司接送取車,回程時搭地點到福岡機場後轉搭接駁車到出入境廳大樓外, 接駁車是大台雙節連結式公車,可以搭載的人數較多,對於旅客的時間壓力相當友善.&#xA;出境大廳到三樓門口外有一個警察駐點派出所,大部分的租車公司都在這裡接駁.&#xA;請注意旅客應停留在航站外行人等候區中,因外面即為車道請勿站立於車道上,避免發生危險.&#xA;這次旅遊租車選了一家當地小規模的租車公司,列出幾項優缺點.&#xA;優點一: 價格較為便宜,服務態度佳 優點二: 還車後可以選擇接送回機場或是博多車站附近的飯店地點 缺點一: 車較舊,我租到的車開高速鬆開油門後,自動換檔時有頓挫感,讓人不安. 缺點二: 附贈Wifi原本是優點,但是訊號不佳,且後面三天都故障連不上,還好我們另有準備sim卡. 缺點三: 在日本使用車用導航是日本的強項,但這次租車卻讓我們使用Car Play,Google Map多次讓我們迷路. 另外,我們有租用KEP(Kyushu Expressway Pass),總共租用了五天,如果自行駕車旅遊的話,推薦大家一定要購買KEP, 因為九州自駕時旅途長度較遠,過路費都滿高的,可以上NEXCO西日本官網計算過路費,使用KEP會較為划算.&#xA;長崎 長崎企鵝水族館&#xA;第一天取車後,我們就直接開車出發到長崎,因帶著小孩們,所以我們參觀了長崎的企鵝館, 企鵝館內維持得很乾淨,企鵝種類相當多,全世界有18種企鵝,這裡收容了9種企鵝,企鵝們精神很好,固定時間會有餵食秀.&#xA;長崎原爆紀念館&#xA;來到長崎到上一個世紀第二次世界大戰的一個重要地點原子爆炸資料館參觀,理解在一個戰爭中帶來多少不幸與災難, 1945年8月9日盟軍在繼廣島後,再次於長崎投下原子彈,之後日本無條件投降.&#xA;在任何一次戰爭中,人類歷經了多少不幸與災難,但歷史卻一在地重演,這是人類應該持續學習領悟的功課, 但願原子爆炸資料館能夠時刻提醒人們,追求和平遠離戰爭所帶來的不幸,掌權者勿因為一己私慾,造成其他百姓的不幸.&#xA;中華街&#xA;長崎新地中華街與位於橫濱市的橫濱中華街,及神戶市的南京町中華街合稱為日本三大中華街,因為我們也沒有去過其他 兩個中華街,所以沒有辦法進行比較,不過長崎的新地中華街明顯規模較小,範圍不大店家也不多.&#xA;長崎中華街內著名的食物為強棒麵,類似中華料理的什錦麵,經過了一些日式口味調整後的日式中華料理. 我們吃的餐廳為王鶴餐廳內不大,招待人員雖然都不會說中文或英文,但還是相當客氣的招待, 我們點了一些不同規格的強棒面共食,大夥兒一致認為強棒麵普通,比不上台灣道地的什錦麵,但炒飯就相當好吃.&#xA;丸山町&#xA;晚間我們住宿處在一個古老的日式房子丸山町,在一個居家小巷弄內,無法開車抵達,車子在外頭馬路上停放下行李後, 停到附近的停車場,行李必須要拉上一段斜坡才會抵達住宿位置,這個住宿地點其實離中華街相當近,但不知為何Google Map 帶著我們繞了一大圈才進到房子附近,可能是附近有單行道關係,已建議房東應該提供更明確的地圖讓旅客參考,避免繞了遠路.&#xA;我們一行十人就在這個日式房子中住上一晚,以空間來說確實小巧了一些,但還是足夠我們睡覺,吃東西就較為壅擠了.&#xA;佐世保 - 豪斯登堡 第二天我們來到孩子們最期待的行程,佐世保的豪斯登堡,剛到九州這幾天氣象報導會連續下雨幾天, 且是會有下豪雨的機率,一大早從長崎市出發時,路上一陣一陣的大雨,心想豪斯登堡可能只能玩室內遊戲區了, 抵達豪斯登堡時雨停了,陰天天氣涼爽沒有下雨,真是感謝老天爺讓我們能夠在豪斯登堡好好地欣賞美景及遊樂設施.&#xA;剛抵達豪斯登堡時,最重要的問題就是停車了,我們的行程安排是當天抵達豪斯登堡,玩了一天也累了, 所以當天就住宿在豪斯登堡的飯店,豪斯登堡飯店有很多家官方飯店,我們這次選的是森林小木屋, 到達豪斯登堡時,我們一直在找森林小屋的停車場,還繞到了豪斯登堡旁的美軍基地,原來佐世保目前仍有美軍駐地, 後來詢問飯店後才知道,所有在豪斯登堡內住宿的旅客,停車場只有一個,就在豪斯登堡入園前的停場場, 停車場很大,有一區是專門提供給住宿旅客停車用的,我們出發前沒有留意到官網就有說明,可以查看官網交通方式中, 有提醒住宿旅客的停車區.&#xA;在這裡停車後,可以稍微留意到停車場往出口方向前進,將會看到一個接駁巴士車站,這個即為住宿區的接駁巴士, 這旁邊有一個托運行李的站點,只要是當天需要Check-In的旅客,可以先將行李拉到此處,登記好個人資料後, 飯店會將您的行李送達到住宿的房間內,注意是房間內,相當貼心.&#xA;處理好行李後,就可以安心地去好好在豪斯登堡內吃喝玩樂囉~我們的票是在KKDAY上買好,抵達當地後只需要秀出憑證, 在入園處刷QR Code即可,入園閘門設計不錯,因為我們人多,所以工作人員帶我們到一旁,開啟電子票券憑證掃碼,每掃一張票券 在閘門旁會有不同顏色的燈號,能讓工作人員判斷這是哪一種票券,進入的遊客是否符合票券種類,所以入園速度相當快速.&#xA;園區內相當漂亮,我想喜愛拍照的遊客光是拍照就可以玩一整天了.&#xA;來到佐世保一定要品嚐一下佐世保漢堡,我個人是滿喜愛這個口味的,它是牛肉堡,吃起來牛肉滿扎實的且漢堡麵包大, 一口咬起來很有滿足感,比起速食店的漢堡,真是有天壤之別,餐廳的菜單品項不多,大多數人都是來享用漢堡的.&#xA;孩子們在這裡開心地玩樂一天,大人也可以餐與許多遊樂設施,累了可以坐在小店前面喝咖啡,相當愜意. 晚餐我們選擇一家義大利餐廳,披薩口味很多且是薄皮的披薩,我們點了四樣披薩與三樣義大利麵,沙拉和香腸, 吃完後上鐘塔看看夜景.</description>
    </item>
    <item>
      <title>怡辰老師的高效時間管理課</title>
      <link>https://hushchen.github.io/posts/hushbookefficiency/</link>
      <pubDate>Sat, 04 May 2024 00:00:00 +0000</pubDate>
      <guid>https://hushchen.github.io/posts/hushbookefficiency/</guid>
      <description>時間管理是個假議題 時間管理是個假議題,重點不再短時間內能做多少事情,也不只是著重高效率就好. 更完整的說,時間管理應該是人生管理,意念管理,情緒管理,資源管理,價值觀管理,經歷管理,關係管理. 罐子哲學 時間就像一個罐子 待處理的事務就像大石頭與小石頭和沙子,體積越大代表越重要 如果在罐子中塞滿了沙子和小石頭,那大石頭就沒有空間放入了 反之,如果先放入大石頭,再放入小石頭,最後在將沙子塞入縫隙中,卻可以裝載更多的物件 凡事 - 要事第一 附註:教養就像一場不跟別人比較的馬拉松,選擇正確的目標,將目光投注於遙遠的彼端,以遠見洞悉未來樣貌,進而產生堅定信念,有困難我們一起想辦法解決. 怡辰老師分享的學習經驗 本來的作法 - 先扣掉吃飯洗澡睡覺的必要時間,再填上課家教時間,空白的區段在填上讀書,社團等時間, 按表操課,最後發現時間估算預留不足,照表操課是理想. 後來的作法 - 要事第一,上課前預習,上課認真聽吸收多,當天馬上複習,效果最好,考慮體力狀態, 早晨體力佳先運動,再讀書,累了就上圖書館借書或用零碎時間洗衣服碗筷等,晚上想睡覺先去洗個澡,回來再讀書. 壓力大,可以找一些對自己來說是舒壓的事情,目標重要也要懂得欣賞人生路上的風景. 工作上不要輕諾,學習如何說不 站在個人角度找出替代方案 站在對方角度找出替代方案 爭取對方諒解,提供可行的承諾 利用槓桿原理讓工作更省力 小心過度追求完美 將完美放在重要的事情上 放下不必要的完美主義 用成長性思維取代完美主義 延伸在專案管理上相同的概念即為敏捷管理 權滿老師智慧小語:標籤是自己貼的,而我們可以選擇換一個標籤. 淇華老師智慧小語:有些人活在過去,有些人只看現在,但我們要有活在未來的能力. 如何找到自己的北極星 如何設定目標呢? 不知道自己的目標? 尋求目標的方法&#xA;方法一:SMART原則 Specific 明確 Measurable 可衡量 Achievable 可實現 Realistic 切實可行 Time-Bound 有時間限制 舉例1: 我希望今年更健康 - 不符合SMART原則 舉例2: 今年每周至少慢跑一次,一次至少三十分鐘 - 明確目標,可衡量,可實現,切實可行,有時間限制 延伸閱讀:鬼速PDCA 方法一:人生腳本法 九宮格法 - 曼陀羅計畫表: 成功案例大谷翔平 時間軸+50大目標 執行 - 善用策略,繪製你的地圖,放路標 將大目標拆解成易達成的小目標 時間管理矩陣圖 分類 完成 刪除 長期緊繃小心彈性疲乏 培養執行力與習慣 - 不管甚麼事,立即動手 學習選擇性放棄 明確區分大小事 確認截止時程 盤點時間分配比重 習慣自然成為規律 打破意志力迷思 - 不要相信你的意志力 松下幸之助: 登峰造極的成就源自於自律,有規律地為一個目標主動採取行動,堅持一天,再堅持一天,又堅持一天,直到成為習慣.</description>
    </item>
    <item>
      <title>2024 真無線藍芽耳機購買記</title>
      <link>https://hushchen.github.io/posts/hushbudsnuarl_mini3/</link>
      <pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://hushchen.github.io/posts/hushbudsnuarl_mini3/</guid>
      <description>在Apple推出AirPods後,開啟了真無線藍芽耳機的市場,目前市場上的商品真的多到目不暇給, 在選擇上真的有一些障礙,所以在開始找屬於自己的藍芽耳機時,我統整了一些條件來進行產品篩選:&#xA;個人將真無線藍芽耳機定義為消費性商品,藍芽耳機內部含了許多電子元件,與傳統的有線耳機不同, 一旦電子元件損壞或電池壽命到達極限,很難繼續保存使用下去.&#xA;因此將目標鎖定在中間等級的商品為主,價格約3000~6000NTD之間.&#xA;因為有外出使用的需求,所以設定的商品為入耳式耳機為主,耳罩式暫不考慮.&#xA;對於聲音的感受是相當主觀的,如果搜尋條件相近的商品外,仍需要試聽才能夠找到屬於自己的商品.&#xA;經同事的介紹,前往新竹動物園附近的新威力試聽, 店面不大但服務相當不錯,推薦有興趣的朋友可以前往試聽.&#xA;因為我本身使用的手機為iphone,在撥放音樂後連接藍芽後,使用的傳輸格式為AAC, 播放的音檔為不知名錄音檔 - Mozart: Eine Kleine Nachtmusik (k 525) - I Allegro, 在現場試聽的幾款耳機將心得彙整如下:&#xA;Final ZE3000 試聽的第一款耳機,是我在試聽前預設的目標,外型設計有菱有角的形狀,是我個人喜愛的風格, 試聽時聲音展現清亮乾淨爽朗的氣息,乾淨純粹是聽感的直接印象,的確是這個價位等級中的佼佼者. Nuarl N10 Pro and Plus 雖然價格超過了我預設的目標,但因為第一次接觸Nuarl這個廠牌還有點陌生,既然店員拿出來了, 我就索性也試聽一下,果然10mm動圈聲音感受很寬廣,動態的範圍更寬廣了,高頻延伸及低頻表現都相當穩定, 不過既然超出了預算的範圍,也算是越級了,就應該排除在考慮之列,否則各家的旗艦機種也要拿出來比一比了. Nuarl mini3 或許是剛剛比較了自家的N10 Pro/Plus,反觀mini3就如其名,耳機和充電盒都小上一截, 搭配上自家開發的Black Ear+隔音抗菌矽膠耳塞,整個貼合度相當緊密,且沒有不適的感覺, 官網上mini3放上了一張大提琴樂手的照片,標題為可以帶走的交響樂, 試聽後相當令人驚艷,6mm石墨烯動態全頻段驅動器,確實造就出優美的低頻處理能力, 由於近幾年我以聽古典樂或是一些BGM配樂為主,mini3相當符合我所蒐尋的目標. 鐵三角 ATH-TWX7 過去我曾經是鐵三角的愛用者,戴上ATH-TWX7之後,很熟悉的音樂處理模式,清亮且反應相當活潑的聲音, 戴上它搭配西洋流行音樂,動感的模式會隨時開啟,可惜近來我比較偏好古典樂或配樂. Sony WF-LS900N 符合一貫Sony富含色彩飽和的感受,視聽時音樂聽起來就像是重新賦予上新科技般的動感舞者站上舞台, 功能也相當齊全,不過我個人喜愛禪風多一點的感覺,之所以不選擇Sony就純粹是個人對於重度色彩的抗拒叛逆之心吧 Beats Studio Buds + 這一次試聽第二個令我驚豔的是Beats Studio Buds+,與iphone搭配的模式設計的相當完美,耳機外型也相當好看, 視聽感受也相當完美,低頻處理相當好,沒有轟頭感卻也沒有遺漏了低頻細節,整體感受Beats讓我相當滿意,但考量價格 取捨之下,最終我還是選擇了mini3. </description>
    </item>
    <item>
      <title>MMCM Unlocked - Vivado Simulation</title>
      <link>https://hushchen.github.io/posts/hushfpgammcm_unlocked/</link>
      <pubDate>Sat, 26 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://hushchen.github.io/posts/hushfpgammcm_unlocked/</guid>
      <description>In a project, the target component is Xilinx Ultrascale Kintex series. We do the RTL simulation using Vivado. I encountered the MMCM can&amp;rsquo;t be locked situation seval times.&#xA;Sometimes I forgot how to solve this problem that spend me some hours to found the root cause. For the reason, I record this issue here.&#xA;There is a IP compoent used in the project - STARTUP 3. Because we design a on-line update configuration function that will be integrated with the STARTUP 3 component.</description>
    </item>
    <item>
      <title>Github Pages 快速架設網站</title>
      <link>https://hushchen.github.io/posts/hushbloggithub_io_training/</link>
      <pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://hushchen.github.io/posts/hushbloggithub_io_training/</guid>
      <description>Github Pages提供了一個快速便利的靜態網頁空間,非常適合架設個人網站或是部落格.&#xA;以下方法介壽如何利用Github Pages架設網站.&#xA;首先,先在Github註冊一個帳號, 並在這個帳號底下建立一個Repositor,這個Repositor是用來管理Github Pages的內容.&#xA;需要注意Repositor命名方式,以註冊帳號為命名:name.github.io&#xA;接下來準備一個Hello Word的index.html檔案,html內容如何編寫可以在網路上找到範例.&#xA;完成後將該index.html放入Repositor中.&#xA;並在此Repositor中編寫readme.md檔案,該檔案是用於github中的說明,與網站內容無關.&#xA;以上完成後,開啟網頁https://yourname.github.io/,可以看到Hellow Word網頁, 網頁架設即完成囉.</description>
    </item>
  </channel>
</rss>
