<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on HERO</title>
    <link>https://hushchen.github.io/tags/python/</link>
    <description>Recent content in Python on HERO</description>
    <generator>Hugo</generator>
    <language>zh-tw</language>
    <copyright>© Athul</copyright>
    <lastBuildDate>Sat, 01 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://hushchen.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>pyenv Poetry workflow</title>
      <link>https://hushchen.github.io/posts/hushpyenv_poetry_workflow_1/</link>
      <pubDate>Sat, 01 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://hushchen.github.io/posts/hushpyenv_poetry_workflow_1/</guid>
      <description>pyenv Poetry workflow 首次建構pyenv控制Porject Local Python版本及使用Poetry控制Package安裝,紀錄使用Workflow&#xA;Abratraction 上一篇pyenv introduction分享使用pyenv控制Python版本, 雖然可以透過pyenv控制Project Local Python版本,除此之外也希望能夠有效區隔各Project的虛擬環境及Package安裝控制, 接下來就開始學習如何使用Poetry來協助建立虛擬環境及安裝Project所需要的各式Package.&#xA;最後順利可以進行Project資料夾的pyenv localPython版本設定,並且透過Poetry建立專案虛擬機器環境及Package管理.&#xA;Methond 為了避免在開發Python專案時常遇到版本不同所造成的困擾,所以開始學習使用pinenv, Poetry兩套工具, 以下整理的是自己初次使用的過程,不確定是否正確,但目前為自己可以控制良好運作的一套流程.&#xA;OS: Windows 11, x64 System.&#xA;(1) PowerShell 安裝 pyenv : 確認command prompt可以執行pyenv及環境變數內容正確後,在pyenv下載所需要的Python版本,為了實驗所以下載了兩個不同版本3.12.8及3.11.9&#xA;(2) Scoop安裝pipx,並在pipx下安裝Poetry,並利用pipx建立環境變數後,確認command prompt可以執行Poetry, 這時Poetry出現訊息指出系統中並無安裝Python,在此以前,曾經在系統中自行安裝過Python,後來因為嘗試使用pyenv所以移除原系統中自行安裝的Python, 依據訊息內容,所以在系統中將Python安裝了回去.系統的Python為3.12.8&#xA;(3) 上述兩個安裝工作完成後,系統架構為 Windows 11 + Python 3.12.8, pyenv versions: 3.11.9 , 3.12.8&#xA;當我執行Poetry new DEMO時, DEMO資料夾下的 pyproject.toml 內容會將被設定為 requires-python = &amp;quot;&amp;gt;=3.12&amp;quot;, 接下來我希望讓該Project專案為Python 3.11.9版本, 我使用pyenv local 3.11.9將專案設定為 3.11.9, 此時安裝套件時候提示版本不符, 故修改pyproject.toml內容為requires-python = &amp;quot;&amp;gt;=3.11&amp;quot;,可順利建立虛擬環境及安裝套件.&#xA;Conclution 經過上述步驟後,可以完成pyenv工具建立Project Local Python版本的控制,例外搭配Poetry建立虛擬環境及Package管理安裝, 所以在Poetry安裝好後,已經將poetry config --list所列出的參數virtualenvs.</description>
    </item>
    <item>
      <title>pyenv introduction</title>
      <link>https://hushchen.github.io/posts/hushpyenv_learning_1/</link>
      <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://hushchen.github.io/posts/hushpyenv_learning_1/</guid>
      <description>Abratraction 最近開始學習Python,過去也偶爾會使用到開源專案,部分開源專案會使用Python來開發, 一直以來想要學習Python,卻沒有下定決心偶碰一下,直到近來AI興起,我個人覺得正式學習程式語言的一大契機, 下次再分享為何是一大契機,通常在使用Python最常遇到的問題就是版本多,部分套件會有不相容情況,因此這一次 將學習如何使用pyenv來隔離Python與切換版本的技巧,完成後可以透過pyenv global來設定全域的 Python版本,pyenv local來設定資料夾本地的Python,在電腦中安裝多版本的Python也能夠做好有效的切換控制.&#xA;Methond 首先,在原本Windows的環境中安裝Python,就會依同安裝Python Launcher啟動器,透過啟動器也可以做好切換, 例如使用py -2 -m pip install requests # 執行 Python 2,py -3 -m pip install requests # 執行 Python 3, 指令py是Windows中的Python Launcher,透過Launcher來啟動特定版本的Python, 而執行python則是直接執行 Python 解譯器,沒有切換版本的功能,Python Launcher的缺點是Windows才有, 非跨平台工具,且無法安裝多種次版本在同一台主機上,例如3.11.5及3.11.3.&#xA;另外一個選擇就是pyenv工具,其本身為一種Linux系統上的工具,沒有Windows版本,後來有貢獻者將其修改為 Windows版本Project pyenv-win,下列也簡述為pyenv, 安裝方法參考官方安裝文件利用PowerShell Script安裝.&#xA;安裝完成後,會在系統環境變數中看到出現了出現了兩個新的Path. 安裝完成後,在Command Prompt或是powershellconsole中執行pyenv versions指令,會發現目前並無安裝的Python版本, 依照個人經驗,pyenv可能未包含比較新版本的安裝清單,因此我們先執行pyenv update來更新清單, 更新完畢後即可以執行pyenv install -l查看目前可以安裝的Python版本清單,pyenv install 3.12.8即會開始安裝3.12.8版本,&#xA;安裝完成後,可以分別設定global及local的Python版本,global屬於全域的設定, 如果在開發資料夾中,希望設定該資料夾的Python版本,可以使用pyenv local &amp;lt;python_version&amp;gt;來設定該資料夾所使用的Python, 並且會在該資料夾中創造出一個.python-version的檔案,檔案內即紀錄local python版本.&#xA;Conclution 經過上述步驟後,即可以安裝pyenv工具,並開始進行Python版本的控制, 不過在實務開發上,需搭配Poetry來使用會更加清楚控制Python版本及Package,未來再另外分享.&#xA;Reference 管理多版本的 Python 環境&amp;ndash;pyenv 建立一個方便開發的 Python 環境 （零）- 使用 Pyenv 管理 Python 版本 為自己學Python - 高見龍 </description>
    </item>
  </channel>
</rss>
