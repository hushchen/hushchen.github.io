<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on HERO</title>
    <link>https://hushchen.github.io/tags/python/</link>
    <description>Recent content in Python on HERO</description>
    <generator>Hugo</generator>
    <language>zh-tw</language>
    <copyright>© Athul</copyright>
    <lastBuildDate>Sat, 26 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://hushchen.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python Development Environment</title>
      <link>https://hushchen.github.io/posts/hushpython_development_environment/</link>
      <pubDate>Sat, 26 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://hushchen.github.io/posts/hushpython_development_environment/</guid>
      <description>Python Development Environment Abratraction 前幾篇曾經介紹過pyenv與Poetry的使用,但對於整體開發環境的架構尚不是那麼熟悉, 利用這篇文章好好整理一下自己開發環境的架構,內容包含的作業系統環境及系統Python版本, pyenv管理開發環境的Python版本,與系統版本隔離避免混亂,並利用Poetry管理套件及 建立虛擬機器環境.&#xA;Method (1) 作業系統環境: Windows 11&#xA;(2) 系統Python版本: 3.12.8,用來進行一些作業系統中部份程式所需要的環境,例如Poetry運行所需環境.&#xA;(3) pyenv: 一種隔離管理Python版本的工具,可以將其想像為一種工具箱,內部裝載了不同版本的Python, 當建立專案資料夾時,可以使用pyenv local指令來指定該專案所使用的Python版本.&#xA;(4) Poetry: 是一種Python的套件管理工具,可以用來安裝、管理套件,並且可以建立虛擬環境, 在專案資料夾中,使用Poetry來安裝套件,並且可以使用Poetry shell指令進入虛擬環境, 但因為Poetry改版後,不再推薦使用Poetry shell指令,而是使用Poetry env activate, 或是指令Invoke-Expression (poetry env activate)來啟動虛擬環境.&#xA;(5) 開發環境架構圖如下:&#xA;flowchart TD&#xD;A(作業系統: Windows)&#xD;subgraph A1 [Python Launcher]&#xD;B(py)&#xD;end&#xD;subgraph A2 [System Env.: Python 3.12.8]&#xD;C1(Package Management: pip)&#xD;C1a(List: Null)&#xD;C2(Package Management: pipx)&#xD;C2a(List: Poetry)&#xD;end&#xD;subgraph A3 [Isolation Env.: pyenv-win]&#xD;D1(Python 3.11.9)&#xD;D2(Python 3.</description>
    </item>
    <item>
      <title>Vibe Coding 初體驗</title>
      <link>https://hushchen.github.io/posts/hushvibe_coding_experence_1/</link>
      <pubDate>Sun, 30 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://hushchen.github.io/posts/hushvibe_coding_experence_1/</guid>
      <description>Vibe Coding 初體驗 這篇文章是我第一次使用Github Copilot進行程式碼的撰寫過程,紀錄當時的心情與想法.&#xA;Abratraction 隨著2022年ChatGPT上市,GenAI成為了近代科技的新一波創新革命,為人們帶來了許多便利的革新, 而在軟體程式碼的撰寫上,也從傳統的工程師手動編碼,並需要透過文件查詢等方式來促進開發的效能, 如今可以透過GenAI的輔助設計,帶來更高效率的軟體開發體驗,無論是撰寫程式碼還是模組測試,都可以利用 GenAI的輔助來提升開發的效率,我想這就是新一世代科技的變革,我相信這將逐漸成為未來的趨勢, 並且進一步改變軟體開發過程中程式設計的方式,所以我嘗試使用Github Copilot來協助我撰寫程式碼, 這篇文章將紀錄我在使用Github Copilot的過程中,Vibe Coding所帶來的體驗與一些問題的解決方法.&#xA;GenAI在各大AI領域公司的產品中有許多不同應用面向發展,Vibe Coding這一個領域的應用也有不少公司正在發展, 例如Github Copilot、Tabnine、Codeium、Cursor等,這些產品都是用來協助開發者撰寫程式碼的方案, 我選擇的平台式Github Copilot,因為它與VS Code有良好的整合,對我來說較為熟悉,且使用者生態圈也較為成熟, 純屬個人偏好,其他產品也各有優勢,大家可以依照自己的需求來選則產品.&#xA;Method 首先,先紹一下目前撰寫該篇文章的時間點,Github Copilot的價格,如官方連結:&#xA;Github Copilot Price&#xA;以個人用戶來說,每月$10USD,或是每年$100USD,如果是學生的話,可以免費使用Github Copilot, 而企業用戶的話,則是每月$19USD,或是每年$199USD,是否值得購買我個人看法是直接體驗看看就知道是否值得投資.&#xA;所以我利用一個Side Project來體驗使用Github Copilot進行Vibe Coding, 我規劃了一個Python的Side Project用來進行一些翻譯的工作,幫助我來看一些影片及文件等, 也順便在這個專案中,學習一下如何使用OpenAI的API來完成相關的任務.&#xA;首先我開啟了VS Code,並且登入Github Copilot的帳號,因為Github Copilot目前已經整合了許多功能, 這裡不介紹這些功能,只會記錄在這過程中,我如何與Github Copilot互動,並完成程式碼的開發工作, 登入帳號後,開啟Github Copilot Chat視窗,如下圖:&#xA;並直接開始在Chat視窗中與Copilot進行對話,首先我們不應該一開始就找Copilot對話,如同一般設計流程一樣, 不是剛開始就埋頭苦幹編寫程式碼,而是先進行需求分析,先規劃好架構,例如模組規劃,輸出入介面等等, 所以一開始我先在ReadMe中寫下需求與模組規劃,再開始與Copilot進行對話, 並且讓Copilot在專案資料夾中去獲取ReadMe中的內容,所以開始對話時,Copilot也會知道使用者的需求, 在對話的過程中,都是用自然語言進行對話,讓Copilot產生程式碼,這過程真的很順,Copilot產生程式碼的速度也很快, 但我想這裡有一個重點要說明,其實Vibe Coding的過程中,個人體驗是當Copilot幫我產生程式碼後,使用者還是必須理解程式碼的內容, 這樣才能知道產生的結果是否符合自己預期的結果,我覺得這個過程是輔助,而不是取代, 所以使用者還是必須要有一定的程式設計能力,才能夠使用Github Copilot來進行Vibe Coding.&#xA;很順利的產生了所需要的程式碼,接下來就開始進行測試,測試的過程中發現,其實產生的程式碼非完全可以直接使用, 還是得需要經過一些Debug的過程,甚至Copilot所使用的API也是舊版的樣式,目前我還不知道如何使用對話方式來改善此問題, 我試著向Copilot說明已經使用到舊的API,但是它無法完成修正的任務,所以在修正的過程中,我還是有自己查API文件, 以及使用其他AI工具,例如ChatGPT來進行諮詢API相關的問題,這個案例也充分表現出,AI工具還是可以互補的, 使用上應該好好利用多種工具來協助自己完成工作任務.&#xA;Conclusion 最後,很快速也很順利的完成自己所規劃的Side Project,或許程式的運作模式不是相當完善,但已經足以完成 自用功能的軟體需求,這也表示Vibe Coding將可以輔助使用者完成一些個人需求的設計, 也可以協助使用者快速建立軟體樣板模型,在產品開發過程中先完成MVP的設計,未來再透過迭代讓更深入的問題由 工程師來改善,我相信這將會是未來新一波的軟體開發模式.</description>
    </item>
    <item>
      <title>Project of Poetry workflow</title>
      <link>https://hushchen.github.io/posts/hushpyenv_poetry_workflow_2/</link>
      <pubDate>Sat, 22 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://hushchen.github.io/posts/hushpyenv_poetry_workflow_2/</guid>
      <description>Project Development with Poetry workflow 在Python開發專案的過程中,如何操作Poetry來建立虛擬環境及執行程式&#xA;Abratraction 在Python專案開發過程中,使用Poetry來進行套件安裝,虛擬環境建置,以及執行程式,過程中進行套件安裝及管理相當方便, 在開發過程中,遇到的一些環節,在本篇文章中紀錄,利於未來開發時參考.&#xA;Method (1) 建立專案,使用指令Poetry new project_name建立專案.&#xA;(2) 搭配pyenv local指令,建立Project Local Python版本的控制.&#xA;(3) 使用Poetry add在pyproject.toml中新增在專案中需要使用的套件.&#xA;(4) 使用Poetry install指令安裝pyproject.toml中列出的所有套件.&#xA;(5) 使用Poetry show指令查看已安裝的套件,--tree參數可以查看套件的相依性.&#xA;(6) 使用Poetry env info指令查看虛擬環境的相關資訊.&#xA;(7) 舊版本使用Poetry shell指令進入虛擬環境,不過在2.0.1版本後已經不再推薦使用此指令,改使用Poetry env activate來進入虛擬環境, 不過,這裡有一個需要留意的問題,使用powershell遇到沒有啟動的狀況,須改用指令Invoke-Expression (poetry env activate)來啟動虛擬環境.&#xA;(8) 啟動虛擬環境後,使用python --version查看Python版本,此時會發現為pyenv設定的版本.&#xA;(9) 使用python main.py可以直接執行該專案下的main.py程式碼內容.&#xA;Conclusion 上述指令紀錄開發過程中Poetry常用的指令.&#xA;Reference Python 套件管理器——Poetry 完全入門指南 Poetry 2.0.1 改用 poetry env activate </description>
    </item>
    <item>
      <title>pyenv Poetry workflow</title>
      <link>https://hushchen.github.io/posts/hushpyenv_poetry_workflow_1/</link>
      <pubDate>Sat, 01 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://hushchen.github.io/posts/hushpyenv_poetry_workflow_1/</guid>
      <description>pyenv Poetry workflow 首次建構pyenv控制Porject Local Python版本及使用Poetry控制Package安裝,紀錄使用Workflow&#xA;Abratraction 上一篇pyenv introduction分享使用pyenv控制Python版本, 雖然可以透過pyenv控制Project Local Python版本,除此之外也希望能夠有效區隔各Project的虛擬環境及Package安裝控制, 接下來就開始學習如何使用Poetry來協助建立虛擬環境及安裝Project所需要的各式Package.&#xA;最後順利可以進行Project資料夾的pyenv localPython版本設定,並且透過Poetry建立專案虛擬機器環境及Package管理.&#xA;Method 為了避免在開發Python專案時常遇到版本不同所造成的困擾,所以開始學習使用pinenv, Poetry兩套工具, 以下整理的是自己初次使用的過程,不確定是否正確,但目前為自己可以控制良好運作的一套流程.&#xA;OS: Windows 11, x64 System.&#xA;(1) PowerShell 安裝 pyenv : 確認command prompt可以執行pyenv及環境變數內容正確後,在pyenv下載所需要的Python版本,為了實驗所以下載了兩個不同版本3.12.8及3.11.9&#xA;(2) Scoop安裝pipx,並在pipx下安裝Poetry,並利用pipx建立環境變數後,確認command prompt可以執行Poetry, 這時Poetry出現訊息指出系統中並無安裝Python,在此以前,曾經在系統中自行安裝過Python,後來因為嘗試使用pyenv所以移除原系統中自行安裝的Python, 依據訊息內容,所以在系統中將Python安裝了回去.系統的Python為3.12.8&#xA;(3) 上述兩個安裝工作完成後,系統架構為 Windows 11 + Python 3.12.8, pyenv versions: 3.11.9 , 3.12.8&#xA;當我執行Poetry new DEMO時, DEMO資料夾下的 pyproject.toml 內容會將被設定為 requires-python = &amp;quot;&amp;gt;=3.12&amp;quot;, 接下來我希望讓該Project專案為Python 3.11.9版本, 我使用pyenv local 3.11.9將專案設定為 3.11.9, 此時安裝套件時候提示版本不符, 故修改pyproject.toml內容為requires-python = &amp;quot;&amp;gt;=3.11&amp;quot;,可順利建立虛擬環境及安裝套件.&#xA;Conclusion 經過上述步驟後,可以完成pyenv工具建立Project Local Python版本的控制,例外搭配Poetry建立虛擬環境及Package管理安裝, 所以在Poetry安裝好後,已經將poetry config --list所列出的參數virtualenvs.</description>
    </item>
    <item>
      <title>pyenv introduction</title>
      <link>https://hushchen.github.io/posts/hushpyenv_learning_1/</link>
      <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://hushchen.github.io/posts/hushpyenv_learning_1/</guid>
      <description>Abratraction 最近開始學習Python,過去也偶爾會使用到開源專案,部分開源專案會使用Python來開發, 一直以來想要學習Python,卻沒有下定決心偶碰一下,直到近來AI興起,我個人覺得正式學習程式語言的一大契機, 下次再分享為何是一大契機,通常在使用Python最常遇到的問題就是版本多,部分套件會有不相容情況,因此這一次 將學習如何使用pyenv來隔離Python與切換版本的技巧,完成後可以透過pyenv global來設定全域的 Python版本,pyenv local來設定資料夾本地的Python,在電腦中安裝多版本的Python也能夠做好有效的切換控制.&#xA;Methond 首先,在原本Windows的環境中安裝Python,就會依同安裝Python Launcher啟動器,透過啟動器也可以做好切換, 例如使用py -2 -m pip install requests # 執行 Python 2,py -3 -m pip install requests # 執行 Python 3, 指令py是Windows中的Python Launcher,透過Launcher來啟動特定版本的Python, 而執行python則是直接執行 Python 解譯器,沒有切換版本的功能,Python Launcher的缺點是Windows才有, 非跨平台工具,且無法安裝多種次版本在同一台主機上,例如3.11.5及3.11.3.&#xA;另外一個選擇就是pyenv工具,其本身為一種Linux系統上的工具,沒有Windows版本,後來有貢獻者將其修改為 Windows版本Project pyenv-win,下列也簡述為pyenv, 安裝方法參考官方安裝文件利用PowerShell Script安裝.&#xA;安裝完成後,會在系統環境變數中看到出現了出現了兩個新的Path. 安裝完成後,在Command Prompt或是powershellconsole中執行pyenv versions指令,會發現目前並無安裝的Python版本, 依照個人經驗,pyenv可能未包含比較新版本的安裝清單,因此我們先執行pyenv update來更新清單, 更新完畢後即可以執行pyenv install -l查看目前可以安裝的Python版本清單,pyenv install 3.12.8即會開始安裝3.12.8版本,&#xA;安裝完成後,可以分別設定global及local的Python版本,global屬於全域的設定, 如果在開發資料夾中,希望設定該資料夾的Python版本,可以使用pyenv local &amp;lt;python_version&amp;gt;來設定該資料夾所使用的Python, 並且會在該資料夾中創造出一個.python-version的檔案,檔案內即紀錄local python版本.&#xA;Conclution 經過上述步驟後,即可以安裝pyenv工具,並開始進行Python版本的控制, 不過在實務開發上,需搭配Poetry來使用會更加清楚控制Python版本及Package,未來再另外分享.&#xA;Reference 管理多版本的 Python 環境&amp;ndash;pyenv 建立一個方便開發的 Python 環境 （零）- 使用 Pyenv 管理 Python 版本 為自己學Python - 高見龍 </description>
    </item>
  </channel>
</rss>
